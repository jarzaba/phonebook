{"version":3,"sources":["services/crud.js","components/AddPersonForm.jsx","components/FilterRecords.jsx","components/ShowPersons.jsx","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","nameObject","post","id","delete","put","AddPersonForm","addNumber","handleNumberChange","handlePersonChange","onSubmit","onChange","type","FilterRecords","persons","filter","handleDelete","person","name","includes","map","key","number","value","onClick","window","confirm","ShowPersons","handleFilterChange","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setFilter","useEffect","console","log","crudOperations","numbersFromDB","catch","err","length","changeNumber","nameMatch","returnedRecord","event","target","preventDefault","find","concat","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c29b78ac.chunk.js","sourcesContent":["import axios from 'axios';\nconst baseUrl = 'https://young-depths-71615.herokuapp.com/api/persons';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst addRecord = (nameObject) => {\n  const request = axios.post(baseUrl, nameObject);\n  return request.then((response) => response.data);\n};\n\nconst updateRecord = (id, nameObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, nameObject);\n  return request.then((response) => response.data);\n};\n\nconst deleteRecord = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`);\n  return request.then((response) => response.data);\n};\n\nexport default { getAll, addRecord, deleteRecord, updateRecord };\n","import React from 'react';\n\nconst AddPersonForm = ({\n  addNumber,\n  handleNumberChange,\n  handlePersonChange,\n}) => (\n  <form onSubmit={addNumber}>\n    <div>\n      name: <input onChange={handlePersonChange} />\n    </div>\n    <div>\n      number: <input onChange={handleNumberChange} />\n    </div>\n    <div>\n      <button type='submit'>add</button>\n    </div>\n  </form>\n);\nexport default AddPersonForm;\n","import React from 'react';\n\nconst FilterRecords = ({ persons, filter, handleDelete }) =>\n  persons\n    .filter((person) => person.name.includes(filter))\n    .map((person) => (\n      <div key={person.name}>\n        {person.name} {person.number}\n        <button\n          value={person.id}\n          key={person.id}\n          onClick={() => {\n            if (\n              window.confirm(`Are you sure you wish to delete ${person.name}?`)\n            )\n              handleDelete(person.id);\n          }}\n        >\n          Delete\n        </button>\n      </div>\n    ));\n\nexport default FilterRecords;\n","import React from 'react';\n\nconst ShowPersons = ({ handleFilterChange }) => (\n  <div>\n    Filter shown with <input onChange={handleFilterChange} />\n  </div>\n);\n\nexport default ShowPersons;\n","import React, { useState, useEffect } from 'react';\n//import axios from 'axios';\nimport crudOperations from './services/crud';\nimport AddPersonForm from './components/AddPersonForm';\nimport FilterRecords from './components/FilterRecords';\nimport ShowPersons from './components/ShowPersons';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    console.log('effect');\n    crudOperations\n      .getAll()\n      .then((numbersFromDB) => {\n        console.log('promise fulfilled');\n        setPersons(numbersFromDB);\n      })\n      .catch((err) => {\n        console.log('ERROR: could not fetch data');\n      });\n  }, []);\n  console.log('render', persons.length, 'persons');\n\n  const addNumber = (event) => {\n    event.preventDefault();\n    const nameObject = {\n      name: newName,\n      number: newNumber,\n    };\n    const nameMatch = persons.find(({ name }) => name === newName);\n    console.log(nameMatch);\n    if (nameMatch) {\n      changeNumber(nameMatch, nameObject);\n    } else {\n      crudOperations\n        .addRecord(nameObject)\n        .then((returnedRecord) => {\n          console.log('SUCCESS: number added;');\n          setPersons(persons.concat(returnedRecord));\n          setNewName('');\n          setNewNumber('');\n        })\n        .catch((err) => {\n          console.log('ERROR: could not addNumber');\n        });\n    }\n  };\n\n  const changeNumber = (nameMatch, nameObject) => {\n    if (\n      window.confirm(\n        `${nameMatch.name} is already added to the phonebook, replace the old number with a new one?`\n      )\n    ) {\n      crudOperations\n        .updateRecord(nameMatch.id, nameObject)\n        .then((returnedRecord) => {\n          console.log('SUCCESS: number UPDATED;');\n          setPersons(\n            persons.map((person) =>\n              person.name !== newName ? person : returnedRecord\n            )\n          );\n          setNewName('');\n          setNewNumber('');\n        })\n        .catch((err) => {\n          console.log('ERROR: could not UPDATE Number');\n        });\n    }\n  };\n\n  const handleDelete = (person) => {\n    crudOperations.deleteRecord(person).then(\n      crudOperations.getAll().then((numbersFromDB) => {\n        setPersons(numbersFromDB);\n      })\n    );\n  };\n\n  const handleFilterChange = (event) => {\n    console.log(event.target.value);\n    setFilter(event.target.value);\n  };\n\n  const handlePersonChange = (event) => {\n    console.log(event.target.value);\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value);\n    setNewNumber(event.target.value);\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <ShowPersons handleFilterChange={handleFilterChange} />\n\n      <h2>Add new number</h2>\n\n      <AddPersonForm\n        {...{ addNumber, handleNumberChange, handlePersonChange }}\n      />\n\n      <h2>Numbers</h2>\n\n      <FilterRecords {...{ persons, filter, handleDelete }} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}